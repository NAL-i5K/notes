
查看 image : docker images

建立 image : docker create [OPTIONS] IMAGE [COMMAND] [ARG...]
	ex : docker create -it --name my-container

刪除 image : docker rmi [OPTIONS] IMAGE [IMAGE...]

目前運行的 container : docker ps 

查看目前全部的 container（ 包含停止狀態的 container ）: docker ps -a

新建並啟動 Container : docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
	ex : docker run -itd -p 8080:80 -p 5432:5432 --name my-container -v /c/Users/user/tripal_apollo statonlab/tripal3
		option : -d 代表在 Detached（ 背景 ）執行，如不加 -d，預設會 foreground ( 前景 ) 執行
		         -p 代表將本機的 8080 port 的所有流量轉發到 container 中的 80 port
		         --name 設定 container 的名稱 (如果不設的話系統會random給名字)
		         -v 這是一個大topic我放在下面單獨解釋

-v 解釋:
Volume
接下來要介紹 Volume，Volume 是 Docker 最推薦存放 persisting data（ 數據 ）的機制， 
使用 Volume 有下列優點
Volumes are easier to back up or migrate than bind mounts.
You can manage volumes using Docker CLI commands or the Docker API.
Volumes work on both Linux and Windows containers.
Volumes can be more safely shared among multiple containers.
Volume drivers allow you to store volumes on remote hosts or cloud providers, to encrypt the contents of volumes, or to add other functionality.
A new volume's contents can be pre-populated by a container.
在 container 的可寫層中，使用 volume 是一個比較好的選擇，因為他不會增加 container 的容量，volume 的內容存在於 container 之外。
	link : https://docs.docker.com/storage/volumes/

進入 Container : docker exec -it <Container ID> bash

停止指定的 CONTAINER 中全部的 processes : docker pause CONTAINER [CONTAINER...]

										docker stop : process 級別。

										docker pause: container 級別。


查看 DOCKER 目前的網路清單 : docker network ls [OPTION]
	docker 中的網路主要有三種 Bridge、Host、None，預設皆為 Bridge 模式。

docker-compose

通常一個 Web 都還會有 DB，甚至可能還有 Redis 或 Celery，

所以說我們需要有 Compose 來管理這些，透過 docker-compose.yml ( YML 格式 ) 文件。

docker-compose.yml 的寫法可參考 https://docs.docker.com/compose/compose-file/

也可以直接參考官網範例 https://docs.docker.com/compose/compose-file/#compose-file-structure-and-examples

Compose 的 Command-line 很多和 Docker 都是類似的，

可參考 https://docs.docker.com/glossary/?term=compose

啟動 Service 的 Container
	docker-compose start  [SERVICE...]
停止 Service 的 Container ( 不會刪除 Container )
	docker-compose stop [options] [SERVICE...]

Builds, (re)creates, starts, and attaches to containers for a service : 
	docker-compose up [options] [--scale SERVICE=NUM...] [SERVICE...]

Docker Registry : 
	
	存放image : Registry 一個類似Github的地方，可以在Docker hub查看

	首先，先註冊，再登入 Docker Registry : docker login
	舉個例子，先 run 一個 my-container 的容器 : docker run -it my-container
	接著在裡面新增一筆資料 : echo 'text' > data.txt
	再來使用像 git 一樣的方式 commit : docker commit -m "test" 3sa8da9 deming/my-container
	deming/my-container 為我們自己定義的Repository
	最後 push docker push deming/my-container





docker compose : Compose is a tool for defining and running multi-container Docker applications.
				 The Compose file is a YAML file defining services, networks and volumes. The default path for a Compose file is ./docker-compose.yml

Using Compose is basically a three-step process:

	1.Define your app’s environment with a Dockerfile so it can be reproduced anywhere.

	2.Define the services that make up your app in docker-compose.yml so they can be run together in an isolated environment.

	3.Run docker-compose up and Compose starts and runs your entire app.

docker file 
		ex :FROM python:2.7.15
			LABEL maintainer Deming
			ENV PYTHONUNBUFFERED 1
			RUN mkdir /docker_api
			WORKDIR /docker_api
			COPY . /docker_api/
			RUN pip install -r requirements.txt

docker-compose.yml
	A docker-compose.yml file is a YAML file that defines how Docker containers should behave in production.

		ex :
	version: '3'
	services:

    	db:
      		container_name: 'postgres'
      		image: postgres
      		environment:
        		POSTGRES_PASSWORD: password123
      		ports:
        		- "5432:5432"
        		# (HOST:CONTAINER)
      		volumes:
        		- pgdata:/var/lib/postgresql/data/

    	web:
      		build: ./api
      		command: python manage.py runserver 0.0.0.0:8000
      		restart: always
      		volumes:
        		- api_data:/docker_api
        		# (HOST:CONTAINER)
      		ports:
        		- "8000:8000"
        		# (HOST:CONTAINER)
      		depends_on:
        		- db

	volumes:
   		api_data:
   		pgdata:



docker apply in django project : 

Create django project:	
	1.Change to the root of your project directory.
	2.Create the Django project by running the docker-compose run command as follows.
		sudo docker-compose run web django-admin.py startproject composeexample .
	3.After the docker-compose command completes, list the contents of your project.
		If you are running Docker on Linux, the files django-admin created are owned by root. This happens because the container runs as the root user. Change the ownership of the new files.
			sudo chown -R $USER:$USER .
	4.		
Connect the database : 
	1.In your project directory, edit the composeexample/settings.py file.
	2.Replace the DATABASES = ... with the following:
		DATABASES = {
    		'default': {
        		'ENGINE': 'django.db.backends.postgresql',
        		'NAME': 'postgres',
        		'USER': 'postgres',
        		'HOST': 'db',
        		'PORT': 5432,
    		}
		}
		These settings are determined by the postgres Docker image specified in docker-compose.yml.
	3.Save and close the file.
	4.Run the docker-compose up command from the top level directory for your project.
	5.At this point, your Django app should be running at port 8000 on your Docker host. On Docker for Mac and Docker for Windows, go to http://localhost:8000 on a web browser to see the   
	  Django welcome page. If you are using Docker Machine, then docker-machine ip MACHINE_VM returns the Docker host IP address, to which you can append the port (<Docker-Host-IP>:8000).
